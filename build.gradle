// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = "1.4.10"
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.0.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.apollographql.apollo:apollo-gradle-plugin:2.5.5"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
plugins {
    id "net.thauvin.erik.gradle.semver" version "1.0.4"
}
def sdkProps = new Properties()
file("./sdk/sdk.properties").withInputStream { sdkProps.load(it) }
def coreProps = new Properties()
file("./core-sdk/core.properties").withInputStream { coreProps.load(it) }
allprojects {
    repositories {
        google()
        jcenter()

        maven {
            name = "RealifeTech SDK Artifactory"
            url = uri("https://maven.pkg.github.com/realifetech/android-sdk")

            credentials {
                Properties properties = new Properties()
                File propertiesFile = project.rootProject.file('local.properties')
                if (propertiesFile.exists()) {
                    properties.load(propertiesFile.newDataInputStream())
                }
                username = properties?.getProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                password = properties?.getProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

subprojects {
    apply from: "$project.rootDir/tools/script-jacoco.gradle"
}
ext {
    room_version = "2.2.5"
    mockito_version = '2.23.0'
    mockito_inline_version="3.11.2"
    mockk_version="1.12.0"
    graphql_version="2.5.5"
    material_version="1.4.0"
    constraint_version="2.1.0"
    junit_version="4.13.2"
    coroutines_version="1.4.1"
    core_version = coreProps.getProperty("core.semver")
    sdk_version = sdkProps.getProperty("sdk.semver")
}
task clean(type: Delete) {
    delete rootProject.buildDir
}
task echoVersion(type: Exec) {
    commandLine 'echo', "${-> project.version}"
}