apply plugin: 'com.android.library'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: "com.apollographql.apollo"
apply plugin: "maven-publish"
apply plugin: "net.thauvin.erik.gradle.semver"
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildFeatures {
        viewBinding true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

apollo {
    // instruct the compiler to generate Kotlin models
    generateKotlinModels.set(true)

    service("core"){
        sourceFolder = "com/realifetech"
        packageName ="com.realifetech"
    }
    service("realifetechCa"){
        sourceFolder = "com/realifetechCa"
        packageName ="com.realifetechCa"
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}
task echoSdkVersion(type: Exec) {
    commandLine 'echo', "${-> project.version}"
}
semver {
    properties = "sdk.properties"
    keysPrefix = "sdk."
}
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    api "com.squareup.okhttp3:logging-interceptor:4.9.0"
    implementation "com.google.android.gms:play-services-ads:16.0.0"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$rootProject.ext.coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$rootProject.ext.kotlin_json"
    // GraphQL
    implementation "com.apollographql.apollo:apollo-runtime:$rootProject.ext.graphql_version"
    implementation "com.apollographql.apollo:apollo-coroutines-support:$rootProject.ext.graphql_version"
    implementation "com.apollographql.apollo:apollo-normalized-cache-sqlite:$rootProject.ext.graphql_version"
    //Material UI
    implementation "com.google.android.material:material:$rootProject.ext.material_version"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraint_version"

    //Dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation 'androidx.test.ext:junit-ktx:1.1.3'
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    //Geuva
    implementation "com.google.guava:guava:30.1.1-android"
    kapt "androidx.room:room-compiler:$rootProject.ext.room_version"
    implementation "androidx.room:room-ktx:$rootProject.ext.room_version"
    implementation "androidx.room:room-runtime:$rootProject.ext.room_version"
    annotationProcessor "androidx.room:room-compiler:$rootProject.ext.room_version"
    // Testing
    testImplementation "junit:junit:$rootProject.ext.junit_version"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockito_version"
    testImplementation "org.mockito:mockito-inline:$rootProject.ext.mockito_inline_version"
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation "io.mockk:mockk:$rootProject.ext.mockk_version"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.ext.coroutines_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.0"
    testImplementation 'org.json:json:20201115'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
}

project.afterEvaluate {
    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/realifetech/android-sdk")
                credentials {
                    Properties properties = new Properties()
                    File propertiesFile = project.rootProject.file('local.properties')
                    if (propertiesFile.exists()) {
                        properties.load(propertiesFile.newDataInputStream())
                    }
                    username = properties?.getProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                    password = properties?.getProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
        publications {
            library(MavenPublication) {
                groupId "com.realifetech"
                artifactId "sdk"
                version project.version
                artifact("$buildDir/outputs/aar/sdk-release.aar")
                artifact(sourceJar)
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        if (it.group != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}